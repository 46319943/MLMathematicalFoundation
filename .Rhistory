epsilon = 0.05
dvc = 10
delta = 0.05
target = function(x){
return(
sqrt(
(8/x) * log(4 * (2*x)^dvc / 8)
) - delta
)
}
library('nleqslv')
nleqslv(10000, target)
epsilon = 0.05
dvc = 10
delta = 0.05
target = function(x){
return(
sqrt(
(8/x) * log(4 * (2*x)^dvc / epsilon)
) - delta
)
}
library('nleqslv')
nleqslv(10000, target)
epsilon = 0.05
dvc = 50
n = 10000
vc_bound = function(){
return (
sqrt(
8 / n * log(4 * (2*n)^dvc / epsilon)
)
)
}
vc_bound()
rademacher_penalty_bound = function(){
return (
sqrt(2 * log(2 * n * n^dvc) / n)
+ sqrt(2 / n * log(1 / epsilon))
+ 1/n
)
}
rademacher_penalty_bound()
parrondo_and_van_den_broek = function(delta){
return (
sqrt(
1 / n * (2*delta + log(6 * (2*n)^dvc / epsilon))
) - delta
)
}
nleqslv(delta, parrondo_and_van_den_broek)
devroye = function(delta){
return (
sqrt(
1 / (2*n) * (4*delta * (1 + delta) + log(4 * (n^2)^dvc / epsilon))
) - delta
)
}
nleqslv(delta, devroye)
varint_vc_bound = function(){
return(
sqrt(
16 / n * log(2 * n^dvc / sqrt(epsilon))
)
)
}
varint_vc_bound()
delta
devroye
devroye(0.05)
(n^2)^dvc
(n^2)
dvc
n ^ dvc
n ^ 2dvc
n ^ (2*dvc)
devroye = function(delta){
return (
sqrt(
1 / (2*n) * (4*delta * (1 + delta) + log(4) - log(epsilon) + 2*dvc*log(n))
) - delta
)
}
nleqslv(delta, devroye)
epsilon = 0.05
dvc = 50
n = 5
vc_bound = function(){
return (
sqrt(
8 / n * log(4 * (2*n)^dvc / epsilon)
)
)
}
vc_bound()
rademacher_penalty_bound = function(){
return (
sqrt(2 * log(2 * n * n^dvc) / n)
+ sqrt(2 / n * log(1 / epsilon))
+ 1/n
)
}
rademacher_penalty_bound()
parrondo_and_van_den_broek = function(delta){
return (
sqrt(
1 / n * (2*delta + log(6 * (2*n)^dvc / epsilon))
) - delta
)
}
nleqslv(delta, parrondo_and_van_den_broek)
# 需要对Log化简，不然log项中的(N^2)^dvc为Inf
# 需要先把平方拿到外面来
devroye = function(delta){
return (
sqrt(
1 / (2*n) * (4*delta * (1 + delta) + log(4) - log(epsilon) + 2*dvc*log(n))
) - delta
)
}
nleqslv(delta, devroye)
varint_vc_bound = function(){
return(
sqrt(
16 / n * log(2 * n^dvc / sqrt(epsilon))
)
)
}
varint_vc_bound()
load("C:/Document/STMDemo/.RData")
library('stm')
library('tm')
library('rjson')
# estimateEffect，估计元数据和主题之间的关系
prep <- estimateEffect(c(14, 9) ~ rank, poliblogPrevFit, meta)
plot(prep, covariate = "rank", model = poliblogPrevFit)
summary(prep)
prep <- estimateEffect(c(14) ~ rank, poliblogPrevFit, meta)
plot(prep, covariate = "rank", model = poliblogPrevFit)
786+10.69+355+159+475+136
setwd("C:/Document/MLMathematicalFoundation")
theta = 0.1
d = 8
Ein = 0.008
target = function(n){
return(
theta^2 * (1 - (d + 1) / n) - Ein
)
}
library('nleqslv')
nleqslv(10, target)
p = 0
x0 = c(1,1,1)
x1 = c(-1, p, 1)
y = c(0, 1, 0)
X = cbind(
x0,
x1
)
library('pracma')
X[1:2,]
p = 0
x0 = c(1,1,1)
x1 = c(-1, p, 1)
y = c(0, 1, 0)
X = cbind(
x0,
x1
)
library('pracma')
pseudo_inverse_X = pinv(X[1:2,])
wlin = pseudo_inverse_X %*% y[1:2]
X[3,] %*% wlin
p = 0
x0 = c(1,1,1)
x1 = c(-1, p, 1)
y = c(0, 1, 0)
E_loocv = 0
X = cbind(
x0,
x1
)
library('pracma')
pseudo_inverse_X = pinv(X[1:2,])
wlin = pseudo_inverse_X %*% y[1:2]
E_loocv = E_loocv + (X[3,] %*% wlin - y[3])^2
p = sqrt(sqrt(3) + 4)
x0 = c(1,1,1)
x1 = c(-1, p, 1)
y = c(0, 1, 0)
E_loocv = 0
X = cbind(
x0,
x1
)
library('pracma')
pseudo_inverse_X = pinv(X[1:2,])
wlin = pseudo_inverse_X %*% y[1:2]
E_loocv = E_loocv + (X[3,] %*% wlin - y[3])^2
pseudo_inverse_X = pinv(X[c(1,3),])
wlin = pseudo_inverse_X %*% y[c(1,3)]
E_loocv = E_loocv + (X[2,] %*% wlin - y[2])^2
pseudo_inverse_X = pinv(X[2:3,])
wlin = pseudo_inverse_X %*% y[2:3]
E_loocv = E_loocv + (X[1,] %*% wlin - y[1])^2
p = sqrt(sqrt(3) + 4)
p = sqrt(sqrt(3) - 1)
x0 = c(1,1,1)
x1 = c(-1, p, 1)
y = c(0, 1, 0)
E_loocv = 0
X = cbind(
x0,
x1
)
library('pracma')
pseudo_inverse_X = pinv(X[1:2,])
wlin = pseudo_inverse_X %*% y[1:2]
E_loocv = E_loocv + (X[3,] %*% wlin - y[3])^2
pseudo_inverse_X = pinv(X[c(1,3),])
wlin = pseudo_inverse_X %*% y[c(1,3)]
E_loocv = E_loocv + (X[2,] %*% wlin - y[2])^2
pseudo_inverse_X = pinv(X[2:3,])
wlin = pseudo_inverse_X %*% y[2:3]
E_loocv = E_loocv + (X[1,] %*% wlin - y[1])^2
E_loocv
(X[1,] %*% wlin - y[1])^2
wlin
p
p = sqrt(sqrt(3) + 4)
p = sqrt(sqrt(3) - 1)
p = sqrt(9 + 4*sqrt(6))
x0 = c(1,1,1)
x1 = c(-1, p, 1)
y = c(0, 1, 0)
E_loocv = 0
X = cbind(
x0,
x1
)
library('pracma')
pseudo_inverse_X = pinv(X[1:2,])
wlin = pseudo_inverse_X %*% y[1:2]
E_loocv = E_loocv + (X[3,] %*% wlin - y[3])^2
pseudo_inverse_X = pinv(X[c(1,3),])
wlin = pseudo_inverse_X %*% y[c(1,3)]
E_loocv = E_loocv + (X[2,] %*% wlin - y[2])^2
pseudo_inverse_X = pinv(X[2:3,])
wlin = pseudo_inverse_X %*% y[2:3]
E_loocv = E_loocv + (X[1,] %*% wlin - y[1])^2
